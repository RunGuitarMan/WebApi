services:
  # --- [POSTGRES MASTER] ---
  postgres_master:
    container_name: webapi-postgres-master
    image: postgres:17
    environment:
      POSTGRES_USER: example_user
      POSTGRES_PASSWORD: example_password
      POSTGRES_DB: example_db
    ports:
      - "5432:5432"
    networks:
      - app-network
    restart: always
    volumes:
      - postgres_master_data:/var/lib/postgresql/data
      - ./init-master.sh:/docker-entrypoint-initdb.d/init-master.sh
      - ./init-master.sql:/docker-entrypoint-initdb.d/init-master.sql

  # --- [POSTGRES REPLICA] ---
  postgres_replica:
    container_name: webapi-postgres-replica
    image: postgres:17
    environment:
      POSTGRES_USER: example_user
      POSTGRES_PASSWORD: example_password
      POSTGRES_DB: example_db
    depends_on:
      - postgres_master
    ports:
      - "5433:5432"
    networks:
      - app-network
    restart: always
    volumes:
      - postgres_replica_data:/var/lib/postgresql/data
      - ./init-replica.sh:/docker-entrypoint-initdb.d/init-replica.sh
      - ./init-replica.sql:/docker-entrypoint-initdb.d/init-replica.sql

  # --- [POSTGRES EXPORTER for MASTER] ---
  postgres_exporter:
    container_name: webapi-postgres-exporter
    image: wrouesnel/postgres_exporter:latest
    environment:
      DATA_SOURCE_NAME: "postgresql://example_user:example_password@postgres_master:5432/example_db?sslmode=disable"
    ports:
      - "9187:9187"
    depends_on:
      - postgres_master
    networks:
      - app-network
    restart: always

  # --- [POSTGRES EXPORTER for REPLICA] ---
  postgres_replica_exporter:
    container_name: webapi-postgres-replica-exporter
    image: wrouesnel/postgres_exporter:latest
    environment:
      DATA_SOURCE_NAME: "postgresql://example_user:example_password@postgres_replica:5432/example_db?sslmode=disable"
    ports:
      - "9188:9187"
    depends_on:
      - postgres_replica
    networks:
      - app-network
    restart: always

  # --- [KAFKA EXPORTER] ---
  kafka_exporter:
    container_name: webapi-kafka-exporter
    image: danielqsj/kafka-exporter:latest
    # Указываем только аргумент, без полного пути к бинарю
    command: ["--kafka.server=kafka:9093"]
    ports:
      - "9308:9308"
    depends_on:
      - kafka
    networks:
      - app-network
    restart: always

  # --- [REDIS EXPORTER] ---
  redis_exporter:
    container_name: webapi-redis-exporter
    image: oliver006/redis_exporter:latest
    environment:
      REDIS_ADDR: "redis://redis:6379"
      # REDIS_PASSWORD: "some_password"
    ports:
      - "9121:9121"
    depends_on:
      - redis
    networks:
      - app-network
    restart: always

  # --- [ZOOKEEPER] ---
  zookeeper:
    container_name: webapi-zookeeper
    image: wurstmeister/zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - app-network
    restart: always

  # --- [KAFKA] ---
  kafka:
    container_name: webapi-kafka
    image: wurstmeister/kafka:latest
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9093
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9093
    ports:
      - "9093:9093"
    depends_on:
      - zookeeper
    networks:
      - app-network
    restart: always

  # --- [REDIS] ---
  redis:
    container_name: webapi-redis
    image: redis:latest
    ports:
      - "6379:6379"
    networks:
      - app-network
    restart: always

  # --- [KAFKA UI] ---
  kafka-ui:
    container_name: webapi-kafka-ui
    image: provectuslabs/kafka-ui:latest
    environment:
      KAFKA_CLUSTERS_0_NAME: "local"
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka:9093"
    ports:
      - "8123:8080"
    depends_on:
      - kafka
    networks:
      - app-network
    restart: always

  # --- [PROMETHEUS] ---
  prometheus:
    container_name: webapi-prometheus
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - app-network
    restart: always

  # --- [GRAFANA] ---
  grafana:
    container_name: webapi-grafana
    image: grafana/grafana:latest
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    ports:
      - "3000:3000"
    networks:
      - app-network
    depends_on:
      - prometheus
    restart: always

  # --- [JAEGER 2] ---
  jaeger:
    container_name: webapi-jaeger
    image: jaegertracing/jaeger:2.3.0
    command:
      - "--set=receivers.otlp.protocols.http.endpoint=0.0.0.0:4318"
      - "--set=receivers.otlp.protocols.grpc.endpoint=0.0.0.0:4317"
    ports:
      - "5778:5778"    # Configurations
      - "16686:16686"  # Jaeger UI
      - "4317:4317"    # OTLP gRPC
      - "4318:4318"    # OTLP HTTP
      - "14250:14250"  # Jaeger gRPC ingest
      - "14268:14268"  # Jaeger HTTP ingest
    networks:
      - app-network
    restart: always

volumes:
  postgres_master_data:
  postgres_replica_data:

networks:
  app-network:
    driver: bridge