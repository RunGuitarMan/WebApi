services:
  # --- [POSTGRES] ---
  postgres:
    container_name: webapi-postgres
    image: postgres:17
    environment:
      POSTGRES_USER: example_user
      POSTGRES_PASSWORD: example_password
      POSTGRES_DB: example_db
    ports:
      - "5432:5432"
    networks:
      - app-network
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data

  # --- [ZOOKEEPER] ---
  zookeeper:
    container_name: webapi-zookeeper
    image: wurstmeister/zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - app-network
    restart: always
    volumes:
      - zookeeper_data:/data   # Задаём именованный том вместо анонимного

  # --- [KAFKA] ---
  kafka:
    container_name: webapi-kafka
    image: wurstmeister/kafka:latest
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9093
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9093
    ports:
      - "9093:9093"
    depends_on:
      - zookeeper
    networks:
      - app-network
    restart: always
    volumes:
      - kafka_data:/kafka      # Аналогично для Kafka

  # --- [REDIS] ---
  redis:
    container_name: webapi-redis
    image: redis:latest
    ports:
      - "6379:6379"
    networks:
      - app-network
    restart: always
    volumes:
      - redis_data:/data       # Redis по умолчанию имеет VOLUME /data

volumes:
  postgres_data:
    name: postgres_data
  zookeeper_data:
    name: zookeeper_data
  kafka_data:
    name: kafka_data
  redis_data:
    name: redis_data

networks:
  app-network:
    driver: bridge
    name: app-network